# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-25 19:37
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations
from pytba.api import TBAClient
from pytba.stats import opr

DISTRICTS = (
    ('0', 'No District'),
    ('fim', 'Michigan'),
    ('mar', 'Mid-Atlantic'),
    ('ne', 'New England'),
    ('pnw', 'Pacifc Northwest'),
    ('in', 'Indiana'),
    ('chs', 'Chesapeake'),
    ('nc', 'North Carolina'),
    ('pch', 'Georgia'),
    ('ont', 'Ontario'),
    ('isr', 'Israel'),
)

OPR_SCORE_DICT = {
    "auto_fuel": 'autoFuelPoints',
    "auto_rotor": 'autoRotorPoints',
    "teleop_fuel": 'teleopFuelPoints',
    "teleop_rotor": 'teleopRotorPoints',
    "teleop_takeoff": 'teleopTakeoffPoints',
}


def forwards_func(apps, schema_editor):
    Event = apps.get_model("predictions", "Event")
    Team = apps.get_model("predictions", "Team")
    db_alias = schema_editor.connection.alias

    if settings.TESTING: return

    event_objs = []
    team_objs = []
    team_oprs = {}

    tba = TBAClient('wjordan', 'predictons_import', '0.1')
    events_list = (e['key'] for e in tba.tba_get('events/2017') if e['event_type'] < 3)

    for event_id in events_list:
        tba_event = tba.event_get(event_id)
        info = tba_event.info
        week = info['week'] if info['week'] is not None else -1
        district = DISTRICTS[info['event_district']][0] if info['event_district'] is not None else 0
        event_objs.append(
            Event(event_id=event_id, name=info['name'], week=week, type=info['event_type'], district=district))
        print("Processed " + event_id)

        if 'alliances' not in info or len(info['alliances']) == 0: continue

        tba_event.matches = [m for m in tba_event.matches if m['alliances']['blue']['score'] != -1]

        oprs = opr(tba_event, **OPR_SCORE_DICT)
        for team_id, opr_dict in oprs.items():
            if team_id in team_oprs:
                o = team_oprs[team_id]
                o['n'] += 1
                for key in o['opr'].keys(): o['opr'][key] += opr_dict[key]
            else:
                team_oprs[team_id] = {
                    'n': 1, 'opr': {k: opr_dict[k] for k in OPR_SCORE_DICT}
                }

    Event.objects.using(db_alias).bulk_create(event_objs)

    for team_id, team_opr in team_oprs.items():
        averages = {k: v / team_opr['n'] for k, v in team_opr['opr'].items()}
        team_objs.append(Team(team_id=team_id, **averages))
        print("Processed " + team_id)

    Team.objects.using(db_alias).bulk_create(team_objs)


def rollback_func(apps, schema_editor):
    Event = apps.get_model("predictions", "Event")
    Team = apps.get_model("predictions", "Team")
    db_alias = schema_editor.connection.alias
    Event.objects.using(db_alias).all().delete()
    Team.objects.using(db_alias).all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ('predictions', '0003_auto_20170325_1814'),
    ]

    operations = [
        migrations.RunPython(forwards_func, rollback_func),
    ]
